#include <iostream>
#include <queue>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) {
        data = value;
        left = NULL;
        right = NULL;
    }
};

// Find minimum value in the BST (leftmost node)
int minVal(Node* root) {
    Node* temp = root;
    while (temp->left != NULL) {
        temp = temp->left;
    }
    return temp->data;
}

// Insert a node into the BST (ignore duplicates)
Node* InsertIntoBST(Node* root, int value) {
    if (root == NULL) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = InsertIntoBST(root->left, value);
    } else if (value > root->data) {  // ignore duplicates
        root->right = InsertIntoBST(root->right, value);
    }
    return root;
}

// Delete a node from the BST
Node* DeleteIntoBST(Node* root, int value) {
    if (root == NULL) {
        return NULL;
    }
    if (value < root->data) {
        root->left = DeleteIntoBST(root->left, value);
    } else if (value > root->data) {
        root->right = DeleteIntoBST(root->right, value);
    } else {
        // 0 child
        if (root->left == NULL && root->right == NULL) {
            delete root;
            return NULL;
        }
        // 1 child
        if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        // 2 children
        int min = minVal(root->right);
        root->data = min;
        root->right = DeleteIntoBST(root->right, min);
    }
    return root;
}

// Inorder Traversal (left-root-right)
void inorder(Node* root) {
    if (root == NULL) {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

// Preorder Traversal (root-left-right)
void preorder(Node* root) {
    if (root == NULL) {
        return;
    }
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

// Postorder Traversal (left-right-root)
void postorder(Node* root) {
    if (root == NULL) {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

// Create a copy of the BST
Node* copyTree(Node* root) {
    if (root == NULL) {
        return NULL;
    }
    Node* newNode = new Node(root->data);
    newNode->left = copyTree(root->left);
    newNode->right = copyTree(root->right);
    return newNode;
}

// Display all parent nodes with their child nodes
void displayParentsWithChildren(Node* root) {
    if (root == NULL) {
        return;
    }
    if (root->left != NULL || root->right != NULL) {
        cout << "Parent: " << root->data;
        if (root->left != NULL) {
            cout << " Left Child: " << root->left->data;
        }
        if (root->right != NULL) {
            cout << " Right Child: " << root->right->data;
        }
        cout << endl;
    }
    displayParentsWithChildren(root->left);
    displayParentsWithChildren(root->right);
}

// Display all leaf nodes
void displayLeafNodes(Node* root) {
    if (root == NULL) {
        return;
    }
    if (root->left == NULL && root->right == NULL) {
        cout << root->data << " ";
    }
    displayLeafNodes(root->left);
    displayLeafNodes(root->right);
}

// Display tree level by level
void levelOrder(Node* root) {
    if (root == NULL) {
        return;
    }
    queue<Node*> q;
    q.push(root);
    while (!q.empty()) {
        Node* current = q.front();
        q.pop();
        cout << current->data << " ";
        if (current->left != NULL) {
            q.push(current->left);
        }
        if (current->right != NULL) {
            q.push(current->right);
        }
    }
}

int main() {
    Node* root = NULL;
    root = InsertIntoBST(root, 5);
    root = InsertIntoBST(root, 45);
    root = InsertIntoBST(root, 3);
    root = InsertIntoBST(root, 9);
    root = InsertIntoBST(root, 2);
    root = InsertIntoBST(root, 7);
    root = InsertIntoBST(root, 8);

    cout << "Inorder of BST: ";
    inorder(root);
    cout << endl;

    cout << "Preorder of BST: ";
    preorder(root);
    cout << endl;

    cout << "Postorder of BST: ";
    postorder(root);
    cout << endl;

    cout << "Deleting node with value 3..." << endl;
    root = DeleteIntoBST(root, 3);
    cout << "Inorder after deletion: ";
    inorder(root);
    cout << endl;

    cout << "Creating a copy of the BST..." << endl;
    Node* rootCopy = copyTree(root);
    cout << "Inorder of copied BST: ";
    inorder(rootCopy);
    cout << endl;

    cout << "Displaying all parent nodes with their child nodes: " << endl;
    displayParentsWithChildren(root);

    cout << "Displaying all leaf nodes: ";
    displayLeafNodes(root);
    cout << endl;

    cout << "Displaying tree level by level: ";
    levelOrder(root);
    cout << endl;

    return 0;
}
